from os.path import exists
from requests import get
from zipfile import ZipFile

base_url = "https://codeby.games"
path = "game_api/files/download"
folder = "parts_a7676d01-1141-4788-a4b2-4bd8b546897b_data"
filename = "task"
filetype = "zip"


def download_zip() -> None:
    """
    Downloads a zip file from the task page to the current directory.
    """

    url = f"{base_url}/{path}?folder={folder}&name={filename}&type={filetype}"

    response = get(url=url)

    try:
        with open(f"Flags/{filename}.{filetype}", "wb") as f:
            f.write(response.content)
    except FileNotFoundError:
        with open(f"{filename}.{filetype}", "wb") as f:
            f.write(response.content)


def unzip() -> None:
    """
    Unpacks a zip file into the current directory.
    """

    if not exists(f"{filename}.{filetype}"):
        download_zip()

    try:
        with ZipFile(f"Flags/{filename}.{filetype}") as zf:
            zf.extractall(path="Flags/")
    except FileNotFoundError:
        with ZipFile(f"{filename}.{filetype}") as zf:
            zf.extractall(path='.')


def get_flag() -> str:
    """
    Returns the challenge flag https://codeby.games/en/categories/cryptography/a7676d01-1141-4788-a4b2-4bd8b546897b
    A useful resource with country flags â€” https://flagpedia.net

    :return: Flag
    """

    if not exists("task.jpg"):
        unzip()

    flags = {
        "ğŸ‡¦ğŸ‡±": "Albania",
        "ğŸ‡§ğŸ‡·": "Brazil",
        "ğŸ‡¨ğŸ‡¾": "Cyprus",
        "ğŸ‡©ğŸ‡²": "Dominica",
        "ğŸ‡ªğŸ‡¨": "Ecuador",
        "ğŸ‡ªğŸ‡¬": "Egypt",
        "ğŸ‡ªğŸ‡ª": "Estonia",
        "ğŸ‡®ğŸ‡³": "India",
        "ğŸ‡®ğŸ‡¹": "Italy",
        "ğŸ‡³ğŸ‡ª": "Niger",
        "ğŸ‡³ğŸ‡¬": "Nigeria",
        "ğŸ‡´ğŸ‡²": "Oman",
        "ğŸ‡·ğŸ‡´": "Romania",
        "ğŸ‡¹ğŸ‡·": "Turkey",
        "ğŸ‡ºğŸ‡¬": "Uganda",
        "ğŸ‡»ğŸ‡ª": "Venezuela",
        "ğŸ‡»ğŸ‡³": "Vietnam",
        "ğŸ‡¾ğŸ‡ª": "Yemen"
    }

    # Take the first letter of the country's name.
    message = [
        flags["ğŸ‡¨ğŸ‡¾"][0],
        flags["ğŸ‡´ğŸ‡²"][0],
        flags["ğŸ‡©ğŸ‡²"][0],
        flags["ğŸ‡ªğŸ‡¬"][0],
        flags["ğŸ‡§ğŸ‡·"][0],
        flags["ğŸ‡¾ğŸ‡ª"][0],
        "{",
        flags["ğŸ‡¾ğŸ‡ª"][0].lower(),
        flags["ğŸ‡´ğŸ‡²"][0].lower(),
        flags["ğŸ‡ºğŸ‡¬"][0].lower(),
        "_",
        flags["ğŸ‡¦ğŸ‡±"][0].lower(),
        flags["ğŸ‡·ğŸ‡´"][0].lower(),
        flags["ğŸ‡ªğŸ‡ª"][0].lower(),
        "_",
        flags["ğŸ‡®ğŸ‡³"][0].lower(),
        flags["ğŸ‡³ğŸ‡ª"][0].lower(),
        flags["ğŸ‡»ğŸ‡³"][0].lower(),
        flags["ğŸ‡ªğŸ‡¨"][0].lower(),
        flags["ğŸ‡³ğŸ‡¬"][0].lower(),
        flags["ğŸ‡¹ğŸ‡·"][0].lower(),
        flags["ğŸ‡®ğŸ‡¹"][0].lower(),
        flags["ğŸ‡»ğŸ‡ª"][0].lower(),
        flags["ğŸ‡ªğŸ‡ª"][0].lower(),
        "}"
    ]

    flag = ''.join(item for item in message)

    return flag


if __name__ == "__main__":
    print(get_flag())
